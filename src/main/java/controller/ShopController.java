package com.mygame.homescapesclone.controller;

import com.mygame.homescapesclone.model.Item;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@Controller
public class ShopController {

    private final List<Item> items = Arrays.asList(
            new Item(1, "üçÄ", "–ó–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏", 20),
            new Item(2, "‚è≥", "–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏", 50),
            new Item(3, "‚ù§Ô∏è", "–õ—é–±–æ–≤—å –ú–∞–∫—Å–∏–º–∞", 300)
    );

    @GetMapping("/shop")
    public String shop(Model model, HttpSession session) {
        Integer balance = (Integer) session.getAttribute("balance");
        if (balance == null) {
            balance = 100;
            session.setAttribute("balance", balance);
        }

        model.addAttribute("balance", balance);
        model.addAttribute("items", items);
        return "shop";
    }

    @PostMapping("/buy")
    @ResponseBody
    public Map<String, String> buyItem(@RequestParam int itemId, HttpSession session) {
        Map<String, String> response = new HashMap<>();
        Integer balance = (Integer) session.getAttribute("balance");

        if (balance == null) {
            balance = 100;
        }

        Optional<Item> itemOpt = items.stream().filter(i -> i.getId() == itemId).findFirst();

        if (itemOpt.isPresent()) {
            Item item = itemOpt.get();
            System.out.println("–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞: " + item.getName() + " –∑–∞ " + item.getPrice());

            if (balance >= item.getPrice()) {
                balance -= item.getPrice();
                session.setAttribute("balance", balance);
                response.put("success", "–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
                System.out.println("–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: " + balance);

                if (item.getId() == 3) {
                    response.put("special", "üíñ –¢—ã —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –º–∏—Ä–µ, –∏ —è —Ç–µ–±—è –ª—é–±–ª—é!");
                    System.out.println("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω special-–∫–æ–Ω—Ç–µ–Ω—Ç!");
                }
            } else {
                response.put("error", "–ù–µ—Ç, –∑–∞–π–∫–∞, –¥–µ–Ω–µ–≥ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!");
                System.out.println("–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.");
            }
        } else {
            response.put("error", "–û—à–∏–±–∫–∞! –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç.");
            System.out.println("–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        return response;
    }
}
